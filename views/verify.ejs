<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Verify Your Email - Coatcard AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <style>
        body {
            font-family: 'Inter', sans-serif;
            /* Gradient Background for the Body */
            background: linear-gradient(135deg, #A8B8FF 0%, #88D3CE 100%); /* Blue-green gradient */
            background-size: 400% 400%; /* Larger background for animation */
            animation: gradientAnimation 15s ease infinite; /* Smooth, continuous gradient animation */
        }

        /* Keyframe animation for the background gradient */
        @keyframes gradientAnimation {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        /* Glassmorphism Effect for the main content container */
        .glass-container {
            background: rgba(255, 255, 255, 0.15); /* Slightly transparent white background */
            backdrop-filter: blur(10px); /* The key to the glass effect */
            -webkit-backdrop-filter: blur(10px); /* For Safari support */
            border: 1px solid rgba(255, 255, 255, 0.2); /* Subtle light border */
            border-radius: 20px; /* Rounded corners for the card */
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15); /* Soft shadow for depth */
            animation: fadeInScale 0.8s ease-out forwards; /* Fade in and slightly scale up on load */
        }

        /* Animation for the main content container */
        @keyframes fadeInScale {
            from {
                opacity: 0;
                transform: scale(0.95);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        /* Input field styling for consistency with the new theme */
        input[type="text"] {
            background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent background */
            border: 1px solid rgba(255, 255, 255, 0.4); /* Lighter border */
            color: #333; /* Dark text for readability */
            box-shadow: none; /* Remove default shadow from Tailwind forms */
        }

        input[type="text"]:focus {
            border-color: #6A82FB; /* Highlight focus with a themed color */
            outline: none; /* Remove default outline */
            box-shadow: 0 0 0 3px rgba(106, 130, 251, 0.3); /* Subtle glow on focus */
        }

        /* Custom button style */
        .btn-primary-gradient {
            background: linear-gradient(45deg, #6A82FB, #FC5C7D); /* Blue to Pink gradient */
            color: white;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .btn-primary-gradient:hover {
            transform: translateY(-2px); /* Slight lift on hover */
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

        /* Header text color */
        .header-text-color {
            color: #FFF; /* White color for main titles */
        }

        /* Descriptive text colors */
        .text-light-gray {
            color: #E0F2F7; /* Light blue color for descriptive text */
        }

        .text-bold-email {
            color: #B2EBF2; /* Slightly brighter light blue for the email */
        }

        /* Resend button and timer styling */
        .resend-btn-style {
            color: #88D3CE; /* Teal/Green color for the button text */
            transition: color 0.3s ease;
        }
        .resend-btn-style:hover:not(:disabled) {
            color: #A8B8FF; /* Lighter blue on hover */
        }
        .resend-btn-style:disabled {
            color: rgba(255, 255, 255, 0.5); /* Faded white when disabled */
            cursor: not-allowed;
        }

        .timer-text-color {
            color: rgba(255, 255, 255, 0.6); /* Semi-transparent white for timer */
        }

        /* Message area styling adjustments */
        .message-success {
            background-color: rgba(165, 215, 167, 0.2); /* Lighter green transparent */
            border-color: rgba(76, 175, 80, 0.4);
            color: #4CAF50;
        }

        .message-error {
            background-color: rgba(255, 199, 199, 0.2); /* Lighter red transparent */
            border-color: rgba(244, 67, 54, 0.4);
            color: #F44336;
        }

        .message-info { /* For resend success messages */
            background-color: rgba(173, 216, 230, 0.2); /* Light blue transparent */
            border-color: rgba(0, 191, 255, 0.4);
            color: #00BFFF;
        }
    </style>
</head>
<body class="flex items-center justify-center h-screen">
    <div class="w-full max-w-md p-8 space-y-6 glass-container"> <h2 class="text-3xl font-bold text-center header-text-color">Check Your Email</h2>
        <p class="text-center text-sm text-light-gray">We've sent a 6-digit verification code to <strong id="user-email" class="text-bold-email"><%= email %></strong>. The code is valid for 10 minutes.</p>
        
        <div id="message-area" class="text-center">
            <% if (locals.msg) { %>
                <div class="px-4 py-3 rounded relative <%= locals.msg.toLowerCase().includes('successfully') ? 'message-success' : 'message-error' %>" role="alert">
                    <span class="block sm:inline"><%= msg %></span>
                </div>
            <% } %>
        </div>

        <form class="mt-4 space-y-6" action="/auth/verify" method="POST">
            <input type="hidden" name="email" value="<%= email %>">
            <div class="rounded-md shadow-sm">
                <div>
                    <label for="otp" class="sr-only">Verification Code</label>
                    <input id="otp" name="otp" type="text" required
                        class="appearance-none rounded-md relative block w-full px-3 py-2 border placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-opacity-50 sm:text-sm"
                        placeholder="6-Digit Code">
                </div>
            </div>
            <div>
                <button type="submit"
                    class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md btn-primary-gradient">
                    Verify Account
                </button>
            </div>
        </form>

        <div class="text-center text-sm">
            <p class="text-light-gray">Didn't receive the code? 
                <button id="resend-btn" class="font-medium resend-btn-style disabled:text-gray-400 disabled:cursor-not-allowed">
                    Resend OTP
                </button>
                <span id="timer" class="hidden timer-text-color"></span>
            </p>
        </div>
    </div>

    <script>
        const resendBtn = document.getElementById('resend-btn');
        const timerSpan = document.getElementById('timer');
        const messageArea = document.getElementById('message-area');
        const userEmail = document.getElementById('user-email').textContent; // Get email from the strong tag
        let countdown;

        function startTimer() {
            let seconds = 60; // Start with 60 seconds for the timer
            resendBtn.disabled = true;
            timerSpan.classList.remove('hidden');

            countdown = setInterval(() => {
                timerSpan.textContent = `(Resend available in ${seconds}s)`;
                seconds--;
                if (seconds < 0) {
                    clearInterval(countdown);
                    resendBtn.disabled = false;
                    timerSpan.classList.add('hidden');
                    timerSpan.textContent = ''; // Clear timer text
                }
            }, 1000);
        }

        resendBtn.addEventListener('click', async () => {
            // Clear previous messages before showing new one
            messageArea.innerHTML = '';
            
            try {
                const response = await fetch('/auth/resend-otp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: userEmail })
                });
                
                const data = await response.json();
                
                let alertClass = '';
                if (response.ok) {
                    alertClass = 'message-info'; // Use info style for resend success
                    startTimer(); // Restart timer on successful resend
                } else {
                    alertClass = 'message-error';
                }

                messageArea.innerHTML = `
                    <div class="px-4 py-3 rounded relative ${alertClass}" role="alert">
                        <span class="block sm:inline">${data.message}</span>
                    </div>`;

            } catch (error) {
                messageArea.innerHTML = `
                    <div class="px-4 py-3 rounded relative message-error" role="alert">
                        <span class="block sm:inline">An error occurred. Please check your connection.</span>
                    </div>`;
            }
        });

        // Start the timer when the page loads
        startTimer();
    </script>
</body>
</html>