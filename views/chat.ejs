<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content="Coatcard AI: Your AI-powered coding assistant for chat-based interactions, code generation, and more.">
    <title>Coatcard AI</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <link href="/css/tailwind.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="theme-color" content="#FFFBEA"> <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-atom-dark.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="/css/style.css">
</head>

<body class="bg-primary-yellow-100 text-text-dark min-h-screen flex antialiased transition-colors duration-300">

    <button id="sidebar-toggle-btn" class="fixed top-4 left-4 z-40 p-2 rounded-md bg-accent-teal-500 text-white shadow-lg md:hidden hover:bg-accent-teal-600 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-accent-teal-300 animate-fade-in">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>

    <div id="confirmation-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center animate-fade-in">
        <div class="bg-white p-6 rounded-xl shadow-2xl max-w-sm w-full transform scale-95 opacity-0 animate-fade-in-up">
            <h3 id="modal-title" class="text-xl font-bold text-gray-900 mb-3">Confirm Action</h3>
            <p id="modal-text" class="mt-2 text-base text-gray-600">Are you sure?</p>
            <div class="mt-8 flex justify-end space-x-4">
                <button id="cancel-btn" class="px-5 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-all duration-200 font-medium">Cancel</button>
                <button id="confirm-btn" class="px-5 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-all duration-200 font-medium shadow-md hover:shadow-lg">Confirm</button>
            </div>
        </div>
    </div>

    <aside id="sidebar" class="fixed inset-y-0 left-0 w-64 bg-primary-yellow-50 border-r border-primary-yellow-200 flex flex-col h-full z-30
                           md:relative md:translate-x-0 md:w-1/4 lg:w-1/5
                           transform -translate-x-full transition-transform duration-300 ease-in-out shadow-lg md:shadow-none">
        <div class="p-4 border-b border-primary-yellow-200 flex items-center justify-between">
            <h1 class="text-2xl font-bold text-primary-yellow-800">Coatcard AI</h1>
            <button id="sidebar-close-btn" class="p-1 rounded-full text-gray-600 hover:bg-gray-200 md:hidden transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div class="p-4 border-b border-primary-yellow-200">
            <button id="new-chat-btn" class="w-full py-3 px-4 bg-accent-teal-500 text-white font-semibold rounded-xl shadow-md hover:bg-accent-teal-600 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-accent-teal-300 flex items-center justify-center space-x-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                </svg>
                <span>New Conversation</span>
            </button>
        </div>
        <div id="chat-history-list" class="flex-1 overflow-y-auto p-2 space-y-2 custom-scrollbar">
            </div>
        <div class="p-4 border-t border-primary-yellow-200">
            <div class="flex items-center justify-between">
                <a href="/profile" title="Edit Profile" class="flex items-center group">
                    <% if (user.profileImage && user.profileImage.data) { %>
                        <img src="data:<%= user.profileImage.contentType %>;base64,<%= user.profileImage.data %>"
                             alt="Profile Avatar"
                             class="h-10 w-10 rounded-full mr-3 object-cover cursor-pointer hover:ring-2 hover:ring-accent-teal-400 transition-all duration-200 flex-shrink-0">
                    <% } else {
                        const initials = user.username ? user.username.charAt(0).toUpperCase() : '?';
                        const bgColorClass = 'bg-accent-teal-500'; // Could be dynamic based on user ID
                    %>
                        <div class="h-10 w-10 rounded-full mr-3 object-cover flex items-center justify-center <%= bgColorClass %> text-white font-bold text-lg flex-shrink-0 cursor-pointer hover:ring-2 hover:ring-accent-teal-400 transition-all duration-200">
                            <%= initials %>
                        </div>
                    <% } %>
                    <div>
                        <p class="font-semibold text-text-dark group-hover:text-primary-yellow-800 transition-colors duration-200"><%= user.username %></p>
                        <span class="text-sm text-text-light group-hover:text-primary-yellow-700 transition-colors duration-200">View Profile</span>
                    </div>
                </a>
                <a href="/auth/logout" class="text-red-600 hover:text-red-700 p-2 rounded-md hover:bg-gray-100 transition-colors duration-200" title="Logout">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                    </svg>
                    <span class="sr-only">Logout</span>
                </a>
            </div>
        </div>
    </aside>

    <main class="flex-1 flex flex-col h-full bg-primary-yellow-100 relative z-10 md:w-3/4 lg:w-4/5">
        <header class="p-4 border-b border-primary-yellow-200 flex justify-between items-center bg-white md:bg-transparent backdrop-blur-md bg-opacity-70 z-20 sticky top-0">
            <h2 id="chat-title" class="text-xl font-bold text-text-dark truncate">Conversation Title</h2>
            <button id="clear-chat-btn" class="text-base font-medium text-red-600 hover:text-red-700 px-3 py-1 rounded-md hover:bg-red-50 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors duration-200">Clear Chat</button>
        </header>

        <div id="chat-container" class="flex-1 p-4 md:p-6 space-y-6 overflow-y-auto custom-scrollbar flex flex-col justify-end">
            <div id="typing-indicator" class="ai-message flex items-center space-x-2 p-3 max-w-lg rounded-xl rounded-bl-none shadow-md bg-white opacity-0 transition-opacity duration-200">
                <img src="/images/ai-avatar.png" alt="AI Avatar" class="w-8 h-8 rounded-full object-cover flex-shrink-0">
                <div class="flex items-center space-x-1">
                    <span class="dot-typing bg-gray-400"></span>
                    <span class="dot-typing bg-gray-400 animation-delay-200"></span>
                    <span class="dot-typing bg-gray-400 animation-delay-400"></span>
                </div>
            </div>
        </div>

        <div class="p-4 border-t border-primary-yellow-200 bg-white md:bg-transparent backdrop-blur-md bg-opacity-70 sticky bottom-0 z-20">
            <div id="suggestion-prompts" class="mb-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                <button class="suggestion-btn bg-gray-100 text-text-dark px-4 py-2 rounded-lg border border-gray-200 hover:bg-gray-200 transition-colors duration-150 text-left">
                    Generate a React component for a to-do list.
                </button>
                <button class="suggestion-btn bg-gray-100 text-text-dark px-4 py-2 rounded-lg border border-gray-200 hover:bg-gray-200 transition-colors duration-150 text-left">
                    Explain the Event Loop in Node.js simply.
                </button>
                <button class="suggestion-btn bg-gray-100 text-text-dark px-4 py-2 rounded-lg border border-gray-200 hover:bg-gray-200 transition-colors duration-150 text-left">
                    Debug this Python function: `def factorial(n):...`
                </button>
                 <button class="suggestion-btn bg-gray-100 text-text-dark px-4 py-2 rounded-lg border border-gray-200 hover:bg-gray-200 transition-colors duration-150 text-left">
                    How to optimize SQL queries?
                </button>
                 <button class="suggestion-btn bg-gray-100 text-text-dark px-4 py-2 rounded-lg border border-gray-200 hover:bg-gray-200 transition-colors duration-150 text-left">
                    Give me a CSS snippet for a responsive hero section.
                </button>
            </div>
            <div class="relative bg-white rounded-full border border-gray-300 shadow-md">
                <textarea id="userInput" placeholder="Message Coatcard AI..."
                          class="w-full bg-transparent text-text-dark placeholder-text-light rounded-full py-3 pl-5 pr-14 focus:outline-none focus:ring-2 focus:ring-accent-teal-400 resize-none overflow-hidden max-h-32 scrollbar-hide"
                          rows="1"></textarea>
                <button id="sendButton" class="absolute right-2 bottom-2 bg-accent-teal-500 text-white p-2 rounded-full hover:bg-accent-teal-600 disabled:bg-accent-teal-200 transition-all duration-200 shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-accent-teal-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="currentColor"><path d="M3.478 2.405a.75.75 0 0 0-.926.94l2.432 7.905H13.5a.75.75 0 0 1 0 1.5H4.984l-2.432 7.905a.75.75 0 0 0 .926.94 60.519 60.519 0 0 0 18.445-8.986.75.75 0 0 0 0-1.218A60.517 60.517 0 0 0 3.478 2.405Z"/></svg>
                    <span class="sr-only">Send Message</span>
                </button>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <script>
        // Pass user details to the client-side script
        window.userDetails = {
            profileImage: "<%= user.profileImage && user.profileImage.data ? `data:${user.profileImage.contentType};base64,${user.profileImage.data}` : '/images/default-avatar.png' %>",
            username: "<%= user.username || 'User' %>", // Fallback username
            preferences: {
                language: "<%= user.preferences.language || 'English' %>", // Provide defaults
                explanationStyle: "<%= user.preferences.explanationStyle || 'Concise' %>"
            },
            role: "<%= user.role || 'Developer' %>",
            fieldOfWork: "<%= user.fieldOfWork || 'Web Development' %>",
            goal: "<%= user.goal || 'Learn and build' %>"
        };

        // Marked.js Configuration
        marked.setOptions({
            gfm: true, // GitHub Flavored Markdown
            breaks: true, // Interpret line breaks as <br/>
            // Highlight.js/Prism.js integration
            highlight: function(code, lang) {
                // Ensure Prism.js is loaded and the language component is available
                if (Prism.languages[lang]) {
                    return Prism.highlight(code, Prism.languages[lang], lang);
                }
                return code; // Return original code if language not found
            }
        });

        // Global functions for modal (can be moved to client.js)
        const confirmationModal = document.getElementById('confirmation-modal');
        const modalTitle = document.getElementById('modal-title');
        const modalText = document.getElementById('modal-text');
        const confirmBtn = document.getElementById('confirm-btn');
        const cancelBtn = document.getElementById('cancel-btn');
        let confirmAction = null; // Stores the function to be called on confirmation

        function showConfirmationModal(title, text, onConfirm) {
            modalTitle.textContent = title;
            modalText.textContent = text;
            confirmAction = onConfirm;
            confirmationModal.classList.remove('hidden');
            confirmationModal.classList.add('flex'); // Ensure flex for centering
            confirmationModal.querySelector('div').classList.remove('scale-95', 'opacity-0'); // Reset animation state
            confirmationModal.querySelector('div').classList.add('animate-fade-in-up'); // Re-trigger animation
        }

        function hideConfirmationModal() {
            // Optional: Add reverse animation before hiding
            confirmationModal.querySelector('div').classList.remove('animate-fade-in-up');
            confirmationModal.querySelector('div').classList.add('scale-95', 'opacity-0');
            setTimeout(() => {
                confirmationModal.classList.add('hidden');
                confirmationModal.classList.remove('flex');
            }, 300); // Match animation duration
        }

        confirmBtn.addEventListener('click', () => {
            if (confirmAction) {
                confirmAction();
            }
            hideConfirmationModal();
        });

        cancelBtn.addEventListener('click', hideConfirmationModal);
        // Close modal on click outside (optional)
        confirmationModal.addEventListener('click', (e) => {
            if (e.target === confirmationModal) {
                hideConfirmationModal();
            }
        });


        // Sidebar Toggle for Mobile
        const sidebar = document.getElementById('sidebar');
        const sidebarToggleBtn = document.getElementById('sidebar-toggle-btn');
        const sidebarCloseBtn = document.getElementById('sidebar-close-btn');

        sidebarToggleBtn.addEventListener('click', () => {
            sidebar.classList.remove('-translate-x-full');
            sidebar.classList.add('translate-x-0');
        });

        sidebarCloseBtn.addEventListener('click', () => {
            sidebar.classList.remove('translate-x-0');
            sidebar.classList.add('-translate-x-full');
        });

        // Close sidebar if screen resizes to larger than md while sidebar is open
        window.addEventListener('resize', () => {
            if (window.innerWidth >= 768) { // Tailwind's 'md' breakpoint
                sidebar.classList.remove('-translate-x-full', 'translate-x-0'); // Ensure it's default on desktop
                sidebar.classList.add('relative');
            } else {
                 sidebar.classList.remove('relative');
            }
        });
        // Initial check on load
        if (window.innerWidth < 768) {
            sidebar.classList.add('-translate-x-full');
            sidebar.classList.remove('relative');
        } else {
            sidebar.classList.add('relative'); // Ensure desktop default
        }


        // Auto-resize textarea
        const userInput = document.getElementById('userInput');
        userInput.addEventListener('input', () => {
            userInput.style.height = 'auto'; // Reset height
            userInput.style.height = userInput.scrollHeight + 'px'; // Set to scroll height
            // Limit max height
            const maxHeight = 128; // Equivalent to h-32 in Tailwind
            if (userInput.scrollHeight > maxHeight) {
                userInput.style.overflowY = 'auto'; // Add scrollbar if content overflows
            } else {
                userInput.style.overflowY = 'hidden'; // Hide scrollbar if not overflowing
            }
        });

        // Initialize Prism.js highlighting after content is loaded/updated
        document.addEventListener('DOMContentLoaded', () => {
            Prism.highlightAll();
        });

    </script>
    <script src="/js/client.js"></script>
</body>
</html>